name: CI

# # Compile only on changes to src folder
# on:
#   push:
#     paths:
#     - 'src/**'
#   pull_request:
#     paths:
#     - 'src/**'
on: [push]
env:
  YUM_DEPS_CMD: |

jobs:
  docs:
    name: Sphinx Docs
    runs-on: ubuntu-latest
    env:
      DOCS_DIR: docs
      API_RELATIVE_DIR: api

    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - run: pip install PyYAML sphinx-rtd-theme PyQt5

    - run: bash docs/docker/build-docs.sh docs/_build

    - name: Git commit, force push gh-pages
      if: github.ref == 'refs/heads/master'
      run: |
        scl enable rh-git218 - << EOF
        set -eufx -o pipefail

        git config user.name "github.com/${{ github.actor }}"
        git config user.email "${{ github.actor }}@${{ github.sha }}"
        git checkout -B gh-pages

        mv .git docs/_build
        cd docs/_build

        git add .
        git commit \
            -m "Generated from GitHub "${{ github.workflow }}" Workflow" \
            -m "See https://github.com/${{ github.repository }}/runs/${GITHUB_ACTION}" \
            && git push --force origin gh-pages \
            || echo "Nothing new to commit and push"

        EOF

  build:
    name: "Build Plugin for ${{ matrix.version }}"
    runs-on: ubuntu-latest
    container:
      image: centos:7
      volumes:
      - ${{ github.workspace }}/pybind11:${{ github.workspace }}/pybind11

    strategy:
      matrix:
        version: ["3.1v2", "3.5v2"]

    steps:
    - uses: actions/checkout@v2

    - name: Checkout PyBind11
      uses: actions/checkout@v2
      with:
        repository: pybind/pybind11
        ref: v2.4.3
        path: pybind11/src

    - name: Build plugin
      run: |
        install_dependencies() {
            yum install -y centos-release-scl epel-release yum-utils
            curl -sSL https://raw.githubusercontent.com/wwfxuk/centos-vault-scl/master/activate.sh | bash
            yum install -y cmake3 devtoolset-6
        }

        install_pybind() {
            pushd pybind11/src
            scl enable devtoolset-6 - << EOF
            cmake3 -DCMAKE_INSTALL_PREFIX="$(readlink -f ..)" -DPYBIND11_INSTALL=1 -DPYBIND11_TEST=0
            make -j "$(nproc)"
            make install
            EOF
            popd
        }

        install_katana() {
            mkdir katana
            curl -sSL "http://thefoundry.s3.amazonaws.com/products/katana/releases/${{ matrix.version }}/Katana${{ matrix.version }}-linux-x86-release-64.tgz" \
            | tar -xzO katana_files.tar.gz | tar -xz -C katana
        }

        set -x
        time install_dependencies
        time install_pybind
        time install_katana

        PYBIND_INCLUDE_DIR="$(readlink -e pybind11/include)"
        KATANA_LOCATION="$(readlink -e katana)"
        KATANA_PYTHON="$(readlink -e ${KATANA_LOCATION}/bin/python2.7/include/python2.7)"
        PYTHON_LIB="$(readlink -e ${KATANA_LOCATION}/bin/python2.7/lib)"

        mkdir build
        cd build
        scl enable devtoolset-6 - << EOF
        command -v cmake3
        echo cmake3 ../src \
          -DPYBIND_INCLUDE_DIR="${PYBIND_INCLUDE_DIR}" \
          -DPYTHON_INCLUDE_DIR="${KATANA_PYTHON}" \
          -DPYTHON_LIB="${PYTHON_LIB}" \
          -DKATANA_LOCATION="${KATANA_LOCATION}" \
        && echo cmake3 --build . --target install
        EOF

        # # Alternatively, setup custom install destination using -DCMAKE_INSTALL_PREFIX
        # mkdir -p "${INSTALL_PREFIX}"
        # scl enable devtoolset-6 - << EOF
        # cmake3 ../src \
        #     -DPYBIND_INCLUDE_DIR=${PYBIND_INCLUDE_DIR} \
        #     -DPYTHON_INCLUDE_DIR=${KATANA_PYTHON} \
        #     -DPYTHON_LIB=${PYTHON_LIB} \
        #     -DKATANA_LOCATION=${KATANA_LOCATION} \
        #     -DCMAKE_INSTALL_PREFIX="${INSTALL_PREFIX}" \
        # && cmake3 --build . --target install
        # EOF
